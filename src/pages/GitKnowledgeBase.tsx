import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { BookOpen, GitBranch, Copy, Check, ArrowLeft, Terminal, Users, Lightbulb, Star, Target, Zap } from "lucide-react";
import { Link } from "react-router-dom";
import { SplineBackground } from "@/components/SplineBackground";
import { useToast } from "@/hooks/use-toast";

const GitKnowledgeBase = () => {
  // Estado para controle dos comandos copiados
  const [copiedCommand, setCopiedCommand] = useState<string | null>(null);
  const { toast } = useToast();

  /**
   * Fun√ß√£o para copiar texto para a √°rea de transfer√™ncia
   * @param text - Texto a ser copiado
   * @param commandName - Nome do comando para exibir na notifica√ß√£o
   */
  const copyToClipboard = async (text: string, commandName: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedCommand(commandName);
      toast({
        title: "‚úÖ Comando Copiado!",
        description: `"${commandName}" foi copiado para sua √°rea de transfer√™ncia`,
      });
      // Remove o estado ap√≥s 2 segundos
      setTimeout(() => setCopiedCommand(null), 2000);
    } catch (err) {
      toast({
        title: "‚ùå Erro",
        description: "N√£o foi poss√≠vel copiar o comando. Tente novamente.",
        variant: "destructive",
      });
    }
  };

  // Comandos Git organizados por categoria com informa√ß√µes completas
  const gitCommands = [
    // Comandos B√°sicos
    {
      command: "git init",
      description: "Inicializa um novo reposit√≥rio Git",
      usage: "git init [nome-do-projeto]",
      example: "git init meu-projeto",
      category: "b√°sico",
      scenario: "Quando voc√™ est√° come√ßando um novo projeto e quer controle de vers√£o",
      tips: "Use 'git init .' para inicializar no diret√≥rio atual"
    },
    {
      command: "git clone",
      description: "Clona um reposit√≥rio remoto para sua m√°quina",
      usage: "git clone <url-do-repositorio> [pasta-destino]",
      example: "git clone https://github.com/usuario/projeto.git minha-pasta",
      category: "b√°sico",
      scenario: "Quando voc√™ quer trabalhar em um projeto existente no GitHub/GitLab",
      tips: "Use '--depth 1' para clonar apenas o √∫ltimo commit e economizar espa√ßo"
    },
    {
      command: "git add",
      description: "Adiciona arquivos ao staging area (√°rea de prepara√ß√£o)",
      usage: "git add <arquivo> | git add . | git add -A",
      example: "git add src/components/Header.tsx",
      category: "b√°sico",
      scenario: "Antes de fazer um commit, voc√™ precisa adicionar os arquivos modificados",
      tips: "Use 'git add .' para adicionar todos os arquivos modificados"
    },
    {
      command: "git commit",
      description: "Salva as mudan√ßas do staging area no hist√≥rico do Git",
      usage: "git commit -m 'mensagem do commit'",
      example: "git commit -m 'feat: adicionar componente de navega√ß√£o'",
      category: "b√°sico",
      scenario: "Depois de adicionar arquivos, voc√™ faz commit para salvar as mudan√ßas",
      tips: "Use mensagens descritivas seguindo conven√ß√µes como Conventional Commits"
    },
    {
      command: "git push",
      description: "Envia commits locais para o reposit√≥rio remoto",
      usage: "git push [remote] [branch]",
      example: "git push origin main",
      category: "b√°sico",
      scenario: "Para compartilhar suas mudan√ßas com outros desenvolvedores",
      tips: "Use 'git push -u origin branch-name' na primeira vez para vincular a branch"
    },
    {
      command: "git pull",
      description: "Baixa e integra mudan√ßas do reposit√≥rio remoto",
      usage: "git pull [remote] [branch]",
      example: "git pull origin main",
      category: "b√°sico",
      scenario: "Para atualizar seu c√≥digo local com as mudan√ßas dos outros",
      tips: "Sempre fa√ßa pull antes de come√ßar a trabalhar para evitar conflitos"
    },
    {
      command: "git status",
      description: "Mostra o estado atual dos arquivos no reposit√≥rio",
      usage: "git status",
      example: "git status",
      category: "b√°sico",
      scenario: "Para ver quais arquivos foram modificados, adicionados ou removidos",
      tips: "Use frequentemente para acompanhar o que est√° acontecendo"
    },
    {
      command: "git log",
      description: "Exibe o hist√≥rico de commits",
      usage: "git log [op√ß√µes]",
      example: "git log --oneline --graph",
      category: "b√°sico",
      scenario: "Para ver o hist√≥rico de mudan√ßas e quem fez o qu√™",
      tips: "Use '--oneline' para uma visualiza√ß√£o mais compacta"
    },

    // Comandos de Branch
    {
      command: "git branch",
      description: "Gerencia branches (ramifica√ß√µes) do projeto",
      usage: "git branch [nome-da-branch] | git branch -d <branch>",
      example: "git branch feature/nova-funcionalidade",
      category: "branch",
      scenario: "Para criar uma nova funcionalidade sem afetar o c√≥digo principal",
      tips: "Use 'git branch -a' para ver todas as branches, incluindo remotas"
    },
    {
      command: "git checkout",
      description: "Muda entre branches ou restaura arquivos",
      usage: "git checkout <nome-da-branch> | git checkout -b <nova-branch>",
      example: "git checkout -b feature/login-system",
      category: "branch",
      scenario: "Para trabalhar em uma branch espec√≠fica ou criar uma nova",
      tips: "Use 'git switch' (Git 2.23+) como alternativa moderna ao checkout"
    },
    {
      command: "git merge",
      description: "Combina mudan√ßas de uma branch com outra",
      usage: "git merge <nome-da-branch>",
      example: "git merge feature/nova-funcionalidade",
      category: "branch",
      scenario: "Quando sua funcionalidade est√° pronta e voc√™ quer juntar com a main",
      tips: "Sempre teste antes de fazer merge e considere usar '--no-ff' para preservar hist√≥rico"
    },
    {
      command: "git switch",
      description: "Comando moderno para trocar de branch (Git 2.23+)",
      usage: "git switch <branch> | git switch -c <nova-branch>",
      example: "git switch -c feature/user-profile",
      category: "branch",
      scenario: "Alternativa mais intuitiva ao git checkout para trocar de branch",
      tips: "Mais seguro que checkout pois √© espec√≠fico para branches"
    },

    // Comandos Avan√ßados
    {
      command: "git stash",
      description: "Salva mudan√ßas temporariamente sem fazer commit",
      usage: "git stash [push -m 'mensagem'] | git stash pop",
      example: "git stash push -m 'WIP: implementando autentica√ß√£o'",
      category: "avan√ßado",
      scenario: "Quando voc√™ precisa mudar de branch rapidamente mas n√£o quer fazer commit",
      tips: "Use 'git stash list' para ver todos os stashes salvos"
    },
    {
      command: "git reset",
      description: "Desfaz commits ou mudan√ßas no staging",
      usage: "git reset [--soft|--mixed|--hard] <commit>",
      example: "git reset --soft HEAD~1",
      category: "avan√ßado",
      scenario: "Quando voc√™ fez um commit errado e quer desfazer mantendo as mudan√ßas",
      tips: "--soft mant√©m as mudan√ßas, --hard remove tudo (cuidado!)"
    },
    {
      command: "git rebase",
      description: "Reorganiza o hist√≥rico de commits",
      usage: "git rebase <branch-base> | git rebase -i <commit>",
      example: "git rebase -i HEAD~3",
      category: "avan√ßado",
      scenario: "Para manter um hist√≥rico linear e limpo antes de fazer merge",
      tips: "Use rebase interativo (-i) para combinar, editar ou reordenar commits"
    },
    {
      command: "git cherry-pick",
      description: "Aplica um commit espec√≠fico de outra branch",
      usage: "git cherry-pick <commit-hash>",
      example: "git cherry-pick abc123def",
      category: "avan√ßado",
      scenario: "Quando voc√™ quer apenas um commit espec√≠fico de outra branch",
      tips: "√ötil para hotfixes que precisam ser aplicados em v√°rias branches"
    },
    {
      command: "git reflog",
      description: "Mostra hist√≥rico de todas as a√ß√µes do Git",
      usage: "git reflog",
      example: "git reflog",
      category: "avan√ßado", 
      scenario: "Para recuperar commits 'perdidos' ou ver hist√≥rico completo",
      tips: "Seu salva-vidas para recuperar trabalho que parecia perdido"
    }
  ];

  // Melhores pr√°ticas para uso eficiente do Git
  const bestPractices = [
    {
      title: "üìù Mensagens de Commit Claras e Padronizadas",
      description: "Use conven√ß√µes como Conventional Commits para manter hist√≥rico organizado",
      example: "‚úÖ 'feat(auth): implementar login com OAuth2'\n‚úÖ 'fix(ui): corrigir alinhamento do header em mobile'\n‚úÖ 'docs: atualizar README com instru√ß√µes de deploy'\n\n‚ùå 'mudan√ßas'\n‚ùå 'fix'\n‚ùå 'atualiza√ß√£o'",
      icon: "üìù",
      category: "comunica√ß√£o"
    },
    {
      title: "üîÑ Commits At√¥micos e Frequentes",
      description: "Cada commit deve representar uma mudan√ßa l√≥gica completa e independente",
      example: "‚úÖ Um commit por funcionalidade\n‚úÖ Commits que passam nos testes\n‚úÖ Mudan√ßas que fazem sentido sozinhas\n\n‚ùå V√°rios bugs em um commit\n‚ùå Commits com c√≥digo quebrado\n‚ùå Mudan√ßas n√£o relacionadas juntas",
      icon: "üîÑ",
      category: "organiza√ß√£o"
    },
    {
      title: "üåø Estrat√©gia de Branching Consistente",
      description: "Use uma estrat√©gia clara para organizar o trabalho em equipe",
      example: "‚úÖ main/master: c√≥digo de produ√ß√£o\n‚úÖ develop: integra√ß√£o de features\n‚úÖ feature/: novas funcionalidades\n‚úÖ hotfix/: corre√ß√µes urgentes\n‚úÖ release/: prepara√ß√£o de vers√µes",
      icon: "üåø",
      category: "workflow"
    },
    {
      title: "üß™ Teste Antes de Publicar",
      description: "Garanta que seu c√≥digo funciona antes de compartilhar",
      example: "‚úÖ npm test && git push\n‚úÖ npm run lint && npm run build\n‚úÖ Testar funcionalidade manualmente\n‚úÖ Verificar que n√£o quebrou outras features\n\n‚ùå git push sem testar\n‚ùå Assumir que 'vai funcionar'",
      icon: "üß™",
      category: "qualidade"
    },
    {
      title: "üîç Code Review Efetivo",
      description: "Use Pull/Merge Requests para manter qualidade do c√≥digo",
      example: "‚úÖ Descri√ß√£o clara do que foi mudado\n‚úÖ Screenshots/GIFs para mudan√ßas visuais\n‚úÖ Checklist de valida√ß√£o\n‚úÖ Reviewer dedicado\n‚úÖ Discuss√£o construtiva",
      icon: "üîç",
      category: "colabora√ß√£o"
    },
    {
      title: "üìö Documenta√ß√£o Atualizada",
      description: "Mantenha README, changelogs e documenta√ß√£o sempre atualizados",
      example: "‚úÖ README com instru√ß√µes claras\n‚úÖ CHANGELOG.md com mudan√ßas\n‚úÖ Coment√°rios no c√≥digo quando necess√°rio\n‚úÖ Wiki ou docs para processos\n\n‚ùå Documenta√ß√£o desatualizada\n‚ùå C√≥digo sem contexto",
      icon: "üìö",
      category: "documenta√ß√£o"
    },
    {
      title: "üõ°Ô∏è Seguran√ßa e Backup",
      description: "Proteja seu trabalho e informa√ß√µes sens√≠veis",
      example: "‚úÖ .gitignore configurado corretamente\n‚úÖ Vari√°veis de ambiente separadas\n‚úÖ Backup regular do reposit√≥rio\n‚úÖ SSH keys configuradas\n\n‚ùå Senhas no c√≥digo\n‚ùå Arquivos sens√≠veis commitados",
      icon: "üõ°Ô∏è",
      category: "seguran√ßa"
    },
    {
      title: "‚ö° Performance e Otimiza√ß√£o",
      description: "Mantenha seu reposit√≥rio r√°pido e eficiente",
      example: "‚úÖ .gitignore bem configurado\n‚úÖ Git LFS para arquivos grandes\n‚úÖ Limpeza peri√≥dica com git gc\n‚úÖ Shallow clones quando apropriado\n\n‚ùå Arquivos bin√°rios grandes no repo\n‚ùå Hist√≥rico desnecess√°rio",
      icon: "‚ö°",
      category: "performance"
    }
  ];

  // Cen√°rios reais de uso do Git no dia a dia
  const realWorldScenarios = [
    {
      title: "üöÄ Desenvolvendo uma Nova Feature",
      steps: [
        "# 1. Atualizar branch principal",
        "git checkout main",
        "git pull origin main",
        "",
        "# 2. Criar nova branch para a feature",
        "git checkout -b feature/sistema-carrinho-compras",
        "",
        "# 3. Desenvolver e fazer commits incrementais", 
        "git add src/components/Cart.tsx",
        "git commit -m 'feat(cart): criar componente b√°sico do carrinho'",
        "",
        "git add src/hooks/useCart.ts",
        "git commit -m 'feat(cart): adicionar hook para gerenciar estado'",
        "",
        "git add src/pages/CartPage.tsx",
        "git commit -m 'feat(cart): implementar p√°gina do carrinho'",
        "",
        "# 4. Testar e publicar",
        "npm test",
        "git push origin feature/sistema-carrinho-compras",
        "",
        "# 5. Criar Pull Request no GitHub/GitLab"
      ],
      scenario: "Fluxo completo para desenvolver uma nova funcionalidade de forma organizada",
      difficulty: "Iniciante",
      timeEstimate: "30-60 min"
    },
    {
      title: "üö® Hotfix para Bug Cr√≠tico em Produ√ß√£o",
      steps: [
        "# 1. Partir da vers√£o de produ√ß√£o",
        "git checkout main",
        "git pull origin main",
        "",
        "# 2. Criar branch de hotfix",
        "git checkout -b hotfix/fix-login-error",
        "",
        "# 3. Corrigir o problema rapidamente",
        "git add src/auth/loginService.ts",
        "git commit -m 'fix(auth): corrigir erro de valida√ß√£o no login'",
        "",
        "# 4. Testar a corre√ß√£o",
        "npm run test:unit",
        "npm run test:e2e",
        "",
        "# 5. Deploy imediato",
        "git push origin hotfix/fix-login-error",
        "# Fazer merge direto na main ap√≥s aprova√ß√£o",
        "git checkout main",
        "git merge hotfix/fix-login-error",
        "git push origin main",
        "",
        "# 6. Aplicar fix tamb√©m na develop",
        "git checkout develop", 
        "git merge hotfix/fix-login-error",
        "git push origin develop"
      ],
      scenario: "Como lidar com bugs cr√≠ticos que precisam de corre√ß√£o imediata",
      difficulty: "Intermedi√°rio",
      timeEstimate: "15-30 min"
    },
    {
      title: "üíæ Salvando Trabalho em Progresso",
      steps: [
        "# Situa√ß√£o: voc√™ est√° codificando mas precisa mudar de branch urgentemente",
        "",
        "# 1. Salvar trabalho atual",
        "git add .",
        "git stash push -m 'WIP: implementando filtros da p√°gina de produtos'",
        "",
        "# 2. Trocar para outra branch e trabalhar",
        "git checkout feature/bug-urgente",
        "# ... fazer o trabalho urgente ...",
        "git add .",
        "git commit -m 'fix: corrigir bug no header mobile'",
        "git push origin feature/bug-urgente",
        "",
        "# 3. Voltar ao trabalho anterior",
        "git checkout feature/filtros-produtos",
        "git stash pop",
        "",
        "# 4. Continuar de onde parou",
        "# ... continuar implementando os filtros ..."
      ],
      scenario: "Como pausar trabalho sem perder progresso quando surge algo urgente",
      difficulty: "Iniciante",
      timeEstimate: "5-10 min"
    },
    {
      title: "üîÑ Resolvendo Conflitos de Merge",
      steps: [
        "# Situa√ß√£o: conflitos ao fazer merge ou pull",
        "",
        "# 1. Tentar fazer merge",
        "git checkout main",
        "git pull origin main",
        "git checkout feature/minha-branch",
        "git merge main",
        "# CONFLICT aparece!",
        "",
        "# 2. Ver arquivos com conflito",
        "git status",
        "",
        "# 3. Abrir arquivos e resolver conflitos",
        "# Editar arquivos, remover <<<<<<< ======= >>>>>>>",
        "# Escolher qual c√≥digo manter",
        "",
        "# 4. Marcar conflitos como resolvidos",
        "git add arquivo-conflitante.ts",
        "",
        "# 5. Finalizar merge",
        "git commit -m 'merge: resolver conflitos com main'",
        "",
        "# 6. Testar e publicar",
        "npm test",
        "git push origin feature/minha-branch"
      ],
      scenario: "Como resolver conflitos que aparecem ao integrar mudan√ßas",
      difficulty: "Intermedi√°rio",
      timeEstimate: "10-30 min"
    },
    {
      title: "üîô Desfazendo Mudan√ßas Indesejadas",
      steps: [
        "# Cen√°rio 1: Desfazer mudan√ßas n√£o commitadas",
        "git status  # ver o que foi mudado",
        "git checkout -- arquivo.ts  # restaurar arquivo espec√≠fico",
        "git reset --hard HEAD  # descartar TODAS as mudan√ßas",
        "",
        "# Cen√°rio 2: Desfazer √∫ltimo commit (mantendo mudan√ßas)",
        "git reset --soft HEAD~1",
        "# Agora voc√™ pode editar e commitar novamente",
        "",
        "# Cen√°rio 3: Desfazer commits p√∫blicos (safe)",
        "git revert HEAD  # cria novo commit desfazendo o anterior",
        "git revert HEAD~2  # desfaz commit de 2 posi√ß√µes atr√°s",
        "",
        "# Cen√°rio 4: Recuperar arquivo deletado",
        "git checkout HEAD~1 -- arquivo-deletado.ts",
        "",
        "# Cen√°rio 5: Voltar arquivo para vers√£o espec√≠fica",
        "git log --oneline arquivo.ts  # ver hist√≥rico",
        "git checkout abc1234 -- arquivo.ts  # restaurar vers√£o espec√≠fica"
      ],
      scenario: "T√©cnicas seguras para desfazer diferentes tipos de mudan√ßas",
      difficulty: "Intermedi√°rio",
      timeEstimate: "5-15 min"
    },
    {
      title: "üë• Colabora√ß√£o em Equipe",
      steps: [
        "# In√≠cio do dia - sincronizar com a equipe",
        "git checkout main",
        "git pull origin main",
        "",
        "# Atualizar sua branch de feature",
        "git checkout feature/minha-feature",
        "git rebase main  # aplicar mudan√ßas da main na sua branch",
        "",
        "# Se houver conflitos, resolver e continuar",
        "# git add . && git rebase --continue",
        "",
        "# Trabalhar normalmente",
        "# ... fazer commits ...",
        "",
        "# Antes de fazer Push Request",
        "git rebase -i HEAD~3  # limpar hist√≥rico de commits",
        "# Combinar commits relacionados",
        "",
        "# Push final",
        "git push origin feature/minha-feature --force-with-lease",
        "",
        "# Criar Pull Request com:",
        "# - Descri√ß√£o clara",
        "# - Screenshots se for UI",
        "# - Checklist de teste"
      ],
      scenario: "Fluxo de trabalho eficiente para equipes de desenvolvimento",
      difficulty: "Avan√ßado",
      timeEstimate: "Workflow di√°rio"
    }
  ];

  return (
    <div className="min-h-screen relative overflow-hidden">
      <SplineBackground />
      
      <div className="relative z-10 container mx-auto px-4 py-8">
        <div className="flex items-center gap-4 mb-8">
          <Button
            asChild
            variant="ghost"
            className="glass border-cyber-purple/30 hover:border-cyber-purple nav-btn hover-glow"
          >
            <Link to="/">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Voltar ao In√≠cio
            </Link>
          </Button>
          
          <div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-cyber-purple to-cyber-pink bg-clip-text text-transparent flex items-center gap-3">
              <BookOpen className="w-8 h-8 text-cyber-purple" />
              Base de Conhecimento Git
            </h1>
            <p className="text-muted-foreground mt-2">
              Documenta√ß√£o completa, melhores pr√°ticas e exemplos reais
            </p>
          </div>
        </div>

        <Tabs defaultValue="commands" className="space-y-6">
          <TabsList className="glass border-cyber-purple/30 hover-glow transition-all duration-300">
            <TabsTrigger 
              value="commands" 
              className="data-[state=active]:bg-cyber-purple/20 hover:bg-cyber-purple/10 transition-all duration-200 flex items-center gap-2"
            >
              <Terminal className="w-4 h-4" />
              Comandos Git
            </TabsTrigger>
            <TabsTrigger 
              value="practices" 
              className="data-[state=active]:bg-cyber-purple/20 hover:bg-cyber-purple/10 transition-all duration-200 flex items-center gap-2"
            >
              <Lightbulb className="w-4 h-4" />
              Melhores Pr√°ticas
            </TabsTrigger>
            <TabsTrigger 
              value="scenarios" 
              className="data-[state=active]:bg-cyber-purple/20 hover:bg-cyber-purple/10 transition-all duration-200 flex items-center gap-2"
            >
              <Users className="w-4 h-4" />
              Casos Reais
            </TabsTrigger>
          </TabsList>

          <TabsContent value="commands" className="space-y-6">
            <div className="grid gap-6">
              {["b√°sico", "branch", "avan√ßado"].map((category) => (
                <Card key={category} className="glass glass-hover border-cyber-purple/50 hover:border-cyber-purple/70 transition-all duration-300 hover:shadow-glow">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-cyber-purple">
                      <div className="p-2 rounded-lg bg-cyber-purple/20">
                        {category === "b√°sico" ? <Target className="w-5 h-5" /> : 
                         category === "branch" ? <GitBranch className="w-5 h-5" /> : 
                         <Zap className="w-5 h-5" />}
                      </div>
                      Comandos {category === "b√°sico" ? "B√°sicos" : category === "branch" ? "de Branch" : "Avan√ßados"}
                      <Badge variant="outline" className="ml-auto text-xs">
                        {gitCommands.filter(cmd => cmd.category === category).length} comandos
                      </Badge>
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Accordion type="single" collapsible className="space-y-2">
                      {gitCommands
                        .filter(cmd => cmd.category === category)
                        .map((cmd, index) => (
                          <AccordionItem key={index} value={`${category}-${index}`} className="border-cyber-purple/20 hover:border-cyber-purple/40 transition-colors duration-200">
                            <AccordionTrigger className="hover:text-cyber-purple hover:no-underline transition-colors duration-200 group command-card-trigger">
                              <div className="flex items-center gap-3 w-full">
                                {/* Badge com comando Git - sem efeito de link */}
                                <Badge className="bg-cyber-purple/20 text-cyber-purple group-hover:bg-cyber-purple/30 group-hover:shadow-[0_0_8px_hsl(var(--cyber-purple)/0.3)] transition-all duration-300 font-mono px-3 py-1.5">
                                  {cmd.command}
                                </Badge>
                                {/* Descri√ß√£o sem efeito de underline */}
                                <span className="text-left flex-1 font-medium">{cmd.description}</span>
                              </div>
                            </AccordionTrigger>
                            <AccordionContent className="space-y-4 pt-4">
                              <div className="grid gap-4">
                                <div>
                                  <h4 className="font-medium text-cyber-green mb-2 flex items-center gap-2">
                                    üìñ Sintaxe:
                                  </h4>
                                  <div className="terminal rounded-lg p-3 flex items-center justify-between hover:bg-background/60 transition-colors duration-200">
                                    <code className="text-cyber-blue font-mono">{cmd.usage}</code>
                                    <Button
                                      size="sm"
                                      variant="ghost"
                                      onClick={() => copyToClipboard(cmd.usage, cmd.command)}
                                      className="nav-btn hover:bg-cyber-purple/20"
                                    >
                                      {copiedCommand === cmd.command ? (
                                        <Check className="w-3 h-3 text-cyber-green" />
                                      ) : (
                                        <Copy className="w-3 h-3" />
                                      )}
                                    </Button>
                                  </div>
                                </div>
                                
                                <div>
                                  <h4 className="font-medium text-cyber-orange mb-2 flex items-center gap-2">
                                    üí° Exemplo Pr√°tico:
                                  </h4>
                                  <div className="terminal rounded-lg p-3 flex items-center justify-between hover:bg-background/60 transition-colors duration-200">
                                    <code className="text-cyber-blue font-mono">{cmd.example}</code>
                                    <Button
                                      size="sm"
                                      variant="ghost"
                                      onClick={() => copyToClipboard(cmd.example, `${cmd.command}-example`)}
                                      className="nav-btn hover:bg-cyber-purple/20"
                                    >
                                      {copiedCommand === `${cmd.command}-example` ? (
                                        <Check className="w-3 h-3 text-cyber-green" />
                                      ) : (
                                        <Copy className="w-3 h-3" />
                                      )}
                                    </Button>
                                  </div>
                                </div>
                                
                                <div>
                                  <h4 className="font-medium text-cyber-pink mb-2 flex items-center gap-2">
                                    üéØ Quando Usar:
                                  </h4>
                                  <p className="text-muted-foreground text-sm bg-muted/50 p-3 rounded-lg">{cmd.scenario}</p>
                                </div>

                                {cmd.tips && (
                                  <div>
                                    <h4 className="font-medium text-cyber-green mb-2 flex items-center gap-2">
                                      ‚ö° Dica Pro:
                                    </h4>
                                    <p className="text-cyber-green text-sm bg-cyber-green/10 p-3 rounded-lg border border-cyber-green/20">{cmd.tips}</p>
                                  </div>
                                )}
                              </div>
                            </AccordionContent>
                          </AccordionItem>
                        ))}
                    </Accordion>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="practices" className="space-y-6">
            <div className="grid gap-6 md:grid-cols-2">
              {bestPractices.map((practice, index) => (
                <Card key={index} className="glass glass-hover border-cyber-purple/50 hover:border-cyber-purple/70 transition-all duration-300 hover:shadow-glow group">
                  <CardHeader>
                    <CardTitle className="text-cyber-green flex items-center gap-3 group-hover:text-cyber-green/90 transition-colors duration-200">
                      <div className="p-2 rounded-lg bg-cyber-green/20">
                        <Star className="w-5 h-5" />
                      </div>
                      {practice.title}
                    </CardTitle>
                    <Badge variant="outline" className="self-start text-xs">
                      {practice.category}
                    </Badge>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-muted-foreground leading-relaxed">{practice.description}</p>
                    <div className="terminal rounded-lg p-4 hover:bg-background/60 transition-colors duration-200">
                      <pre className="text-sm text-cyber-blue whitespace-pre-wrap font-mono leading-relaxed">{practice.example}</pre>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="scenarios" className="space-y-6">
            <div className="grid gap-6">
              {realWorldScenarios.map((scenario, index) => (
                <Card key={index} className="glass glass-hover border-cyber-purple/50 hover:border-cyber-purple/70 transition-all duration-300 hover:shadow-glow">
                  <CardHeader>
                    <div className="flex items-start justify-between mb-4">
                      <CardTitle className="text-cyber-orange flex items-center gap-3">
                        <div className="p-2 rounded-lg bg-cyber-orange/20">
                          <Users className="w-5 h-5" />
                        </div>
                        {scenario.title}
                      </CardTitle>
                      <div className="flex gap-2">
                        <Badge variant="outline" className="text-xs">
                          {scenario.difficulty}
                        </Badge>
                        <Badge variant="outline" className="text-xs text-cyber-blue">
                          {scenario.timeEstimate}
                        </Badge>
                      </div>
                    </div>
                    <p className="text-muted-foreground text-sm bg-muted/50 p-3 rounded-lg">{scenario.scenario}</p>
                  </CardHeader>
                  <CardContent>
                    <div className="terminal rounded-lg p-4 space-y-1 hover:bg-background/60 transition-colors duration-200">
                      {scenario.steps.map((step, stepIndex) => (
                        <div key={stepIndex} className="flex items-start gap-2 min-h-[1.5rem]">
                          {step.startsWith('#') ? (
                            // Coment√°rio
                            <div className="text-cyber-green text-sm font-mono w-full py-1">
                              {step}
                            </div>
                          ) : step.trim() === '' ? (
                            // Linha vazia
                            <div className="w-full h-2"></div>
                          ) : (
                            // Comando
                            <>
                              <span className="text-cyber-green text-sm font-mono flex-shrink-0 mt-0.5">$</span>
                              <code className="text-cyber-blue text-sm font-mono flex-1">{step}</code>
                            </>
                          )}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default GitKnowledgeBase;